/******************************************************************************

Copyright (c) 2016-2022 VMware, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VMACCEL_RPC_H_RPCGEN
#define _VMACCEL_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "vmaccel_defs.h"
#define VMACCEL_MAX_NONCE_SIZE 4
#define VMACCEL_MAX_LOCATION_SIZE 4

typedef u_int VMAccelStatusCode;

typedef u_int VMAccelResourceType;

typedef u_int VMAccelArchitectureType;

typedef u_int VMAccelSelectionMask;

typedef u_int VMAccelId;

typedef u_int VMAccelCaps;

typedef u_int VMAccelSurfacePool;

typedef u_int VMAccelSurfaceType;

typedef u_int VMAccelSurfaceUsage;

typedef u_int VMAccelSurfaceMapFlags;

typedef u_int VMAccelSurfaceReadConsistency;

typedef u_int VMAccelSurfaceWriteConsistency;

typedef u_int VMAccelFormatCaps;

typedef u_int VMAccelSurfaceBindFlags;

typedef u_int VMAccelSurfaceFormat;

typedef u_int VMAccelSurfaceFormatCaps;

struct VMAccelStatus {
   struct {
      u_int nonce_len;
      char *nonce_val;
   } nonce;
   VMAccelStatusCode status;
};
typedef struct VMAccelStatus VMAccelStatus;

struct VMAccelAddress {
   struct {
      u_int addr_len;
      char *addr_val;
   } addr;
   u_int port;
   VMAccelResourceType resourceType;
   u_int subDevice;
};
typedef struct VMAccelAddress VMAccelAddress;

struct VMAccelCallback {
   VMAccelAddress addr;
   struct {
      u_int payload_len;
      char *payload_val;
   } payload;
};
typedef struct VMAccelCallback VMAccelCallback;

struct VMAccelFormatDesc {
   u_int format;
   VMAccelFormatCaps caps;
};
typedef struct VMAccelFormatDesc VMAccelFormatDesc;

struct VMAccelWorkloadDesc {
   u_int megaFlops;
   u_int megaOps;
   u_int llcSizeKB;
   u_int llcBandwidthMBSec;
   u_int localMemSizeKB;
   u_int localMemBandwidthMBSec;
   u_int nonLocalMemSizeKB;
   u_int nonLocalMemBandwidthMBSec;
   u_int interconnectBandwidthMBSec;
};
typedef struct VMAccelWorkloadDesc VMAccelWorkloadDesc;

struct VMAccelDesc {
   VMAccelId parentId;
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   VMAccelArchitectureType architecture;
   VMAccelCaps caps;
   struct {
      u_int formatCaps_len;
      VMAccelFormatDesc *formatCaps_val;
   } formatCaps;
   VMAccelWorkloadDesc capacity;
   u_int maxContexts;
   u_int maxQueues;
   u_int maxEvents;
   u_int maxFences;
   u_int maxSurfaces;
   u_int maxMappings;
};
typedef struct VMAccelDesc VMAccelDesc;

struct VMAccelResourceDesc {
   VMAccelId parentId;
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   VMAccelSelectionMask selectionMask;
   VMAccelCaps caps;
   u_int num;
   u_int size;
};
typedef struct VMAccelResourceDesc VMAccelResourceDesc;

struct VMAccelAllocateStatus {
   VMAccelStatusCode status;
   VMAccelId id;
   VMAccelDesc desc;
};
typedef struct VMAccelAllocateStatus VMAccelAllocateStatus;

struct VMAccelRegisterDesc {
   VMAccelDesc desc;
   VMAccelResourceType typeMask;
};
typedef struct VMAccelRegisterDesc VMAccelRegisterDesc;

struct VMAccelResourceAllocateStatus {
   VMAccelStatusCode status;
   VMAccelId id;
};
typedef struct VMAccelResourceAllocateStatus VMAccelResourceAllocateStatus;

struct VMAccelRegisterAllocationDesc {
   VMAccelAddress parentAddr;
   VMAccelResourceType typeMask;
   u_int num;
   u_int size;
};
typedef struct VMAccelRegisterAllocationDesc VMAccelRegisterAllocationDesc;

struct VMAccelRegisterStatus {
   VMAccelStatusCode status;
   VMAccelId id;
};
typedef struct VMAccelRegisterStatus VMAccelRegisterStatus;

struct VMAccelElementDouble4D {
   double x;
   double y;
   double z;
   double w;
};
typedef struct VMAccelElementDouble4D VMAccelElementDouble4D;

struct VMAccelElementFloat4D {
   float x;
   float y;
   float z;
   float w;
};
typedef struct VMAccelElementFloat4D VMAccelElementFloat4D;

struct VMAccelElementUINT4D {
   u_int r;
   u_int g;
   u_int b;
   u_int a;
};
typedef struct VMAccelElementUINT4D VMAccelElementUINT4D;

struct VMAccelCoordinate2DUINT {
   u_int x;
   u_int y;
};
typedef struct VMAccelCoordinate2DUINT VMAccelCoordinate2DUINT;

struct VMAccelCoordinate3DUINT {
   u_int x;
   u_int y;
   u_int z;
};
typedef struct VMAccelCoordinate3DUINT VMAccelCoordinate3DUINT;

struct VMAccelCoordinate4DUINT {
   u_int x;
   u_int y;
   u_int z;
   u_int w;
};
typedef struct VMAccelCoordinate4DUINT VMAccelCoordinate4DUINT;

struct VMAccelSurfaceDesc {
   VMAccelId parentId;
   VMAccelSurfaceType type;
   u_int width;
   u_int height;
   u_int depth;
   u_int mipLevels;
   u_int arraySize;
   u_int samples;
   VMAccelSurfaceFormat format;
   VMAccelSurfaceFormatCaps formatCaps;
   VMAccelSurfacePool pool;
   VMAccelSurfaceUsage usage;
   VMAccelSurfaceBindFlags bindFlags;
   u_int slicePitch;
   u_int rowPitch;
};
typedef struct VMAccelSurfaceDesc VMAccelSurfaceDesc;

typedef u_int VMAccelHandleType;

struct VMAccelSurfaceId {
   VMAccelSurfaceType type;
   VMAccelHandleType handleType;
   VMAccelId id;
   u_int instance;
   u_int offset;
   u_int generation;
};
typedef struct VMAccelSurfaceId VMAccelSurfaceId;

struct VMAccelSurfaceAllocateStatus {
   VMAccelStatusCode status;
   VMAccelSurfaceDesc surfaceDesc;
};
typedef struct VMAccelSurfaceAllocateStatus VMAccelSurfaceAllocateStatus;

typedef u_int VMAccelQueueFlags;

struct VMAccelQueueDesc {
   VMAccelQueueFlags flags;
   u_int size;
};
typedef struct VMAccelQueueDesc VMAccelQueueDesc;

struct VMAccelQueueStatus {
   VMAccelStatusCode status;
};
typedef struct VMAccelQueueStatus VMAccelQueueStatus;

struct VMAccelSurfaceRegion {
   u_int mipLevel;
   VMAccelCoordinate3DUINT coord;
   VMAccelCoordinate3DUINT size;
};
typedef struct VMAccelSurfaceRegion VMAccelSurfaceRegion;

struct VMAccelSurfaceCopyOp {
   VMAccelSurfaceRegion dstRegion;
   VMAccelSurfaceRegion srcRegion;
};
typedef struct VMAccelSurfaceCopyOp VMAccelSurfaceCopyOp;

struct VMAccelImageFillOp {
   VMAccelSurfaceRegion dstRegion;
   VMAccelElementDouble4D d;
   VMAccelElementFloat4D f;
   VMAccelElementUINT4D u;
};
typedef struct VMAccelImageFillOp VMAccelImageFillOp;

struct VMAccelImageTransferOp {
   VMAccelSurfaceRegion imgRegion;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
   struct {
      u_int callbacks_len;
      VMAccelCallback *callbacks_val;
   } callbacks;
};
typedef struct VMAccelImageTransferOp VMAccelImageTransferOp;

struct VMAccelDownloadStatus {
   VMAccelStatusCode status;
   VMAccelId fence;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelDownloadStatus VMAccelDownloadStatus;

struct VMAccelSurfaceMapOp {
   VMAccelSurfaceId surf;
   VMAccelCoordinate3DUINT coord;
   VMAccelCoordinate2DUINT size;
   VMAccelSurfaceMapFlags mapFlags;
};
typedef struct VMAccelSurfaceMapOp VMAccelSurfaceMapOp;

struct VMAccelSurfaceUnmapOp {
   VMAccelSurfaceId surf;
   VMAccelSurfaceMapFlags mapFlags;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelSurfaceUnmapOp VMAccelSurfaceUnmapOp;

struct VMAccelSurfaceMapStatus {
   VMAccelStatusCode status;
   struct {
      u_int ptr_len;
      char *ptr_val;
   } ptr;
};
typedef struct VMAccelSurfaceMapStatus VMAccelSurfaceMapStatus;

struct VMAccelComputeArgDesc {
   u_int index;
   VMAccelSurfaceUsage usage;
   VMAccelSurfaceId surf;
   struct {
      u_int data_len;
      char *data_val;
   } data;
};
typedef struct VMAccelComputeArgDesc VMAccelComputeArgDesc;

struct VMAccelComputeOp {
   u_int kernelType;
   struct {
      u_int kernelSource_len;
      char *kernelSource_val;
   } kernelSource;
   struct {
      u_int kernelBinary32_len;
      char *kernelBinary32_val;
   } kernelBinary32;
   struct {
      u_int kernelBinary64_len;
      char *kernelBinary64_val;
   } kernelBinary64;
   struct {
      u_int kernelName_len;
      char *kernelName_val;
   } kernelName;
   u_int dimension;
   struct {
      u_int globalWorkOffset_len;
      u_int *globalWorkOffset_val;
   } globalWorkOffset;
   struct {
      u_int globalWorkSize_len;
      u_int *globalWorkSize_val;
   } globalWorkSize;
   struct {
      u_int localWorkSize_len;
      u_int *localWorkSize_val;
   } localWorkSize;
   struct {
      u_int args_len;
      VMAccelComputeArgDesc *args_val;
   } args;
};
typedef struct VMAccelComputeOp VMAccelComputeOp;

struct VMAccelComputeStatus {
   VMAccelStatusCode status;
   struct {
      u_int outputs_len;
      VMAccelComputeArgDesc *outputs_val;
   } outputs;
};
typedef struct VMAccelComputeStatus VMAccelComputeStatus;

struct VMAccelReturnStatus {
   int errno;
   union {
      VMAccelStatus *ret;
   } VMAccelReturnStatus_u;
};
typedef struct VMAccelReturnStatus VMAccelReturnStatus;

struct VMAccelAllocateReturnStatus {
   int errno;
   union {
      VMAccelAllocateStatus *ret;
   } VMAccelAllocateReturnStatus_u;
};
typedef struct VMAccelAllocateReturnStatus VMAccelAllocateReturnStatus;

struct VMAccelResourceAllocateReturnStatus {
   int errno;
   union {
      VMAccelResourceAllocateStatus *ret;
   } VMAccelResourceAllocateReturnStatus_u;
};
typedef struct VMAccelResourceAllocateReturnStatus
   VMAccelResourceAllocateReturnStatus;

struct VMAccelRegisterReturnStatus {
   int errno;
   union {
      VMAccelRegisterStatus *ret;
   } VMAccelRegisterReturnStatus_u;
};
typedef struct VMAccelRegisterReturnStatus VMAccelRegisterReturnStatus;

struct VMAccelQueueReturnStatus {
   int errno;
   union {
      VMAccelQueueStatus *ret;
   } VMAccelQueueReturnStatus_u;
};
typedef struct VMAccelQueueReturnStatus VMAccelQueueReturnStatus;

struct VMAccelSurfaceAllocateReturnStatus {
   int errno;
   union {
      VMAccelSurfaceAllocateStatus *ret;
   } VMAccelSurfaceAllocateReturnStatus_u;
};
typedef struct VMAccelSurfaceAllocateReturnStatus
   VMAccelSurfaceAllocateReturnStatus;

struct VMAccelDownloadReturnStatus {
   int errno;
   union {
      VMAccelDownloadStatus *ret;
   } VMAccelDownloadReturnStatus_u;
};
typedef struct VMAccelDownloadReturnStatus VMAccelDownloadReturnStatus;

struct VMAccelSurfaceMapReturnStatus {
   int errno;
   union {
      VMAccelSurfaceMapStatus *ret;
   } VMAccelSurfaceMapReturnStatus_u;
};
typedef struct VMAccelSurfaceMapReturnStatus VMAccelSurfaceMapReturnStatus;

struct VMAccelComputeReturnStatus {
   int errno;
   union {
      VMAccelComputeStatus *ret;
   } VMAccelComputeReturnStatus_u;
};
typedef struct VMAccelComputeReturnStatus VMAccelComputeReturnStatus;

#define VMACCEL 0x20000079
#define VMACCEL_VERSION 1

#if defined(__STDC__) || defined(__cplusplus)
#define VMACCEL_RESOURCEALLOC 1
extern VMAccelResourceAllocateReturnStatus *
vmaccel_resourcealloc_1(VMAccelResourceDesc *, CLIENT *);
extern VMAccelResourceAllocateReturnStatus *
vmaccel_resourcealloc_1_svc(VMAccelResourceDesc *, struct svc_req *);
#define VMACCEL_RESOURCERELEASE 2
extern VMAccelReturnStatus *vmaccel_resourcerelease_1(VMAccelId *, CLIENT *);
extern VMAccelReturnStatus *vmaccel_resourcerelease_1_svc(VMAccelId *,
                                                          struct svc_req *);
#define VMACCEL_COMPUTE 3
extern VMAccelComputeReturnStatus *vmaccel_compute_1(VMAccelComputeOp *,
                                                     CLIENT *);
extern VMAccelComputeReturnStatus *vmaccel_compute_1_svc(VMAccelComputeOp *,
                                                         struct svc_req *);
extern int vmaccel_1_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define VMACCEL_RESOURCEALLOC 1
extern VMAccelResourceAllocateReturnStatus *vmaccel_resourcealloc_1();
extern VMAccelResourceAllocateReturnStatus *vmaccel_resourcealloc_1_svc();
#define VMACCEL_RESOURCERELEASE 2
extern VMAccelReturnStatus *vmaccel_resourcerelease_1();
extern VMAccelReturnStatus *vmaccel_resourcerelease_1_svc();
#define VMACCEL_COMPUTE 3
extern VMAccelComputeReturnStatus *vmaccel_compute_1();
extern VMAccelComputeReturnStatus *vmaccel_compute_1_svc();
extern int vmaccel_1_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern bool_t xdr_VMAccelStatusCode(XDR *, VMAccelStatusCode *);
extern bool_t xdr_VMAccelResourceType(XDR *, VMAccelResourceType *);
extern bool_t xdr_VMAccelArchitectureType(XDR *, VMAccelArchitectureType *);
extern bool_t xdr_VMAccelSelectionMask(XDR *, VMAccelSelectionMask *);
extern bool_t xdr_VMAccelId(XDR *, VMAccelId *);
extern bool_t xdr_VMAccelCaps(XDR *, VMAccelCaps *);
extern bool_t xdr_VMAccelSurfacePool(XDR *, VMAccelSurfacePool *);
extern bool_t xdr_VMAccelSurfaceType(XDR *, VMAccelSurfaceType *);
extern bool_t xdr_VMAccelSurfaceUsage(XDR *, VMAccelSurfaceUsage *);
extern bool_t xdr_VMAccelSurfaceMapFlags(XDR *, VMAccelSurfaceMapFlags *);
extern bool_t
xdr_VMAccelSurfaceReadConsistency(XDR *, VMAccelSurfaceReadConsistency *);
extern bool_t
xdr_VMAccelSurfaceWriteConsistency(XDR *, VMAccelSurfaceWriteConsistency *);
extern bool_t xdr_VMAccelFormatCaps(XDR *, VMAccelFormatCaps *);
extern bool_t xdr_VMAccelSurfaceBindFlags(XDR *, VMAccelSurfaceBindFlags *);
extern bool_t xdr_VMAccelSurfaceFormat(XDR *, VMAccelSurfaceFormat *);
extern bool_t xdr_VMAccelSurfaceFormatCaps(XDR *, VMAccelSurfaceFormatCaps *);
extern bool_t xdr_VMAccelStatus(XDR *, VMAccelStatus *);
extern bool_t xdr_VMAccelAddress(XDR *, VMAccelAddress *);
extern bool_t xdr_VMAccelCallback(XDR *, VMAccelCallback *);
extern bool_t xdr_VMAccelFormatDesc(XDR *, VMAccelFormatDesc *);
extern bool_t xdr_VMAccelWorkloadDesc(XDR *, VMAccelWorkloadDesc *);
extern bool_t xdr_VMAccelDesc(XDR *, VMAccelDesc *);
extern bool_t xdr_VMAccelResourceDesc(XDR *, VMAccelResourceDesc *);
extern bool_t xdr_VMAccelAllocateStatus(XDR *, VMAccelAllocateStatus *);
extern bool_t xdr_VMAccelRegisterDesc(XDR *, VMAccelRegisterDesc *);
extern bool_t
xdr_VMAccelResourceAllocateStatus(XDR *, VMAccelResourceAllocateStatus *);
extern bool_t
xdr_VMAccelRegisterAllocationDesc(XDR *, VMAccelRegisterAllocationDesc *);
extern bool_t xdr_VMAccelRegisterStatus(XDR *, VMAccelRegisterStatus *);
extern bool_t xdr_VMAccelElementDouble4D(XDR *, VMAccelElementDouble4D *);
extern bool_t xdr_VMAccelElementFloat4D(XDR *, VMAccelElementFloat4D *);
extern bool_t xdr_VMAccelElementUINT4D(XDR *, VMAccelElementUINT4D *);
extern bool_t xdr_VMAccelCoordinate2DUINT(XDR *, VMAccelCoordinate2DUINT *);
extern bool_t xdr_VMAccelCoordinate3DUINT(XDR *, VMAccelCoordinate3DUINT *);
extern bool_t xdr_VMAccelCoordinate4DUINT(XDR *, VMAccelCoordinate4DUINT *);
extern bool_t xdr_VMAccelSurfaceDesc(XDR *, VMAccelSurfaceDesc *);
extern bool_t xdr_VMAccelHandleType(XDR *, VMAccelHandleType *);
extern bool_t xdr_VMAccelSurfaceId(XDR *, VMAccelSurfaceId *);
extern bool_t xdr_VMAccelSurfaceAllocateStatus(XDR *,
                                               VMAccelSurfaceAllocateStatus *);
extern bool_t xdr_VMAccelQueueFlags(XDR *, VMAccelQueueFlags *);
extern bool_t xdr_VMAccelQueueDesc(XDR *, VMAccelQueueDesc *);
extern bool_t xdr_VMAccelQueueStatus(XDR *, VMAccelQueueStatus *);
extern bool_t xdr_VMAccelSurfaceRegion(XDR *, VMAccelSurfaceRegion *);
extern bool_t xdr_VMAccelSurfaceCopyOp(XDR *, VMAccelSurfaceCopyOp *);
extern bool_t xdr_VMAccelImageFillOp(XDR *, VMAccelImageFillOp *);
extern bool_t xdr_VMAccelImageTransferOp(XDR *, VMAccelImageTransferOp *);
extern bool_t xdr_VMAccelDownloadStatus(XDR *, VMAccelDownloadStatus *);
extern bool_t xdr_VMAccelSurfaceMapOp(XDR *, VMAccelSurfaceMapOp *);
extern bool_t xdr_VMAccelSurfaceUnmapOp(XDR *, VMAccelSurfaceUnmapOp *);
extern bool_t xdr_VMAccelSurfaceMapStatus(XDR *, VMAccelSurfaceMapStatus *);
extern bool_t xdr_VMAccelComputeArgDesc(XDR *, VMAccelComputeArgDesc *);
extern bool_t xdr_VMAccelComputeOp(XDR *, VMAccelComputeOp *);
extern bool_t xdr_VMAccelComputeStatus(XDR *, VMAccelComputeStatus *);
extern bool_t xdr_VMAccelReturnStatus(XDR *, VMAccelReturnStatus *);
extern bool_t xdr_VMAccelAllocateReturnStatus(XDR *,
                                              VMAccelAllocateReturnStatus *);
extern bool_t
xdr_VMAccelResourceAllocateReturnStatus(XDR *,
                                        VMAccelResourceAllocateReturnStatus *);
extern bool_t xdr_VMAccelRegisterReturnStatus(XDR *,
                                              VMAccelRegisterReturnStatus *);
extern bool_t xdr_VMAccelQueueReturnStatus(XDR *, VMAccelQueueReturnStatus *);
extern bool_t
xdr_VMAccelSurfaceAllocateReturnStatus(XDR *,
                                       VMAccelSurfaceAllocateReturnStatus *);
extern bool_t xdr_VMAccelDownloadReturnStatus(XDR *,
                                              VMAccelDownloadReturnStatus *);
extern bool_t
xdr_VMAccelSurfaceMapReturnStatus(XDR *, VMAccelSurfaceMapReturnStatus *);
extern bool_t xdr_VMAccelComputeReturnStatus(XDR *,
                                             VMAccelComputeReturnStatus *);

#else /* K&R C */
extern bool_t xdr_VMAccelStatusCode();
extern bool_t xdr_VMAccelResourceType();
extern bool_t xdr_VMAccelArchitectureType();
extern bool_t xdr_VMAccelSelectionMask();
extern bool_t xdr_VMAccelId();
extern bool_t xdr_VMAccelCaps();
extern bool_t xdr_VMAccelSurfacePool();
extern bool_t xdr_VMAccelSurfaceType();
extern bool_t xdr_VMAccelSurfaceUsage();
extern bool_t xdr_VMAccelSurfaceMapFlags();
extern bool_t xdr_VMAccelSurfaceReadConsistency();
extern bool_t xdr_VMAccelSurfaceWriteConsistency();
extern bool_t xdr_VMAccelFormatCaps();
extern bool_t xdr_VMAccelSurfaceBindFlags();
extern bool_t xdr_VMAccelSurfaceFormat();
extern bool_t xdr_VMAccelSurfaceFormatCaps();
extern bool_t xdr_VMAccelStatus();
extern bool_t xdr_VMAccelAddress();
extern bool_t xdr_VMAccelCallback();
extern bool_t xdr_VMAccelFormatDesc();
extern bool_t xdr_VMAccelWorkloadDesc();
extern bool_t xdr_VMAccelDesc();
extern bool_t xdr_VMAccelResourceDesc();
extern bool_t xdr_VMAccelAllocateStatus();
extern bool_t xdr_VMAccelRegisterDesc();
extern bool_t xdr_VMAccelResourceAllocateStatus();
extern bool_t xdr_VMAccelRegisterAllocationDesc();
extern bool_t xdr_VMAccelRegisterStatus();
extern bool_t xdr_VMAccelElementDouble4D();
extern bool_t xdr_VMAccelElementFloat4D();
extern bool_t xdr_VMAccelElementUINT4D();
extern bool_t xdr_VMAccelCoordinate2DUINT();
extern bool_t xdr_VMAccelCoordinate3DUINT();
extern bool_t xdr_VMAccelCoordinate4DUINT();
extern bool_t xdr_VMAccelSurfaceDesc();
extern bool_t xdr_VMAccelHandleType();
extern bool_t xdr_VMAccelSurfaceId();
extern bool_t xdr_VMAccelSurfaceAllocateStatus();
extern bool_t xdr_VMAccelQueueFlags();
extern bool_t xdr_VMAccelQueueDesc();
extern bool_t xdr_VMAccelQueueStatus();
extern bool_t xdr_VMAccelSurfaceRegion();
extern bool_t xdr_VMAccelSurfaceCopyOp();
extern bool_t xdr_VMAccelImageFillOp();
extern bool_t xdr_VMAccelImageTransferOp();
extern bool_t xdr_VMAccelDownloadStatus();
extern bool_t xdr_VMAccelSurfaceMapOp();
extern bool_t xdr_VMAccelSurfaceUnmapOp();
extern bool_t xdr_VMAccelSurfaceMapStatus();
extern bool_t xdr_VMAccelComputeArgDesc();
extern bool_t xdr_VMAccelComputeOp();
extern bool_t xdr_VMAccelComputeStatus();
extern bool_t xdr_VMAccelReturnStatus();
extern bool_t xdr_VMAccelAllocateReturnStatus();
extern bool_t xdr_VMAccelResourceAllocateReturnStatus();
extern bool_t xdr_VMAccelRegisterReturnStatus();
extern bool_t xdr_VMAccelQueueReturnStatus();
extern bool_t xdr_VMAccelSurfaceAllocateReturnStatus();
extern bool_t xdr_VMAccelDownloadReturnStatus();
extern bool_t xdr_VMAccelSurfaceMapReturnStatus();
extern bool_t xdr_VMAccelComputeReturnStatus();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_VMACCEL_RPC_H_RPCGEN */
