/******************************************************************************

Copyright (c) 2016-2022 VMware, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice,
       this list of conditions and the following disclaimer.

    2. Redistributions in binary form must reproduce the above copyright
       notice, this list of conditions and the following disclaimer in the
       documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

******************************************************************************/

/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _VMCL_RPC_H_RPCGEN
#define _VMCL_RPC_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#include "vmaccel_rpc.h"
#include "vmcl_defs.h"

typedef u_int VMCLCaps;

typedef u_int VMCLKernelLanguage;

typedef VMAccelId VMCLContextId;

struct VMCLContextAllocateDesc {
   VMAccelId accelId;
   VMCLContextId clientId;
   VMAccelSelectionMask selectionMask;
   u_int numSubDevices;
   VMCLCaps requiredCaps;
};
typedef struct VMCLContextAllocateDesc VMCLContextAllocateDesc;

struct VMCLContextAllocateStatus {
   VMAccelStatusCode status;
   VMCLCaps caps;
};
typedef struct VMCLContextAllocateStatus VMCLContextAllocateStatus;

struct VMCLSurfaceId {
   VMCLContextId cid;
   VMAccelSurfaceId accel;
};
typedef struct VMCLSurfaceId VMCLSurfaceId;

struct VMCLSurfaceAllocateDesc {
   VMCLSurfaceId client;
   VMAccelSurfaceDesc desc;
};
typedef struct VMCLSurfaceAllocateDesc VMCLSurfaceAllocateDesc;

struct VMCLQueueId {
   VMCLContextId cid;
   VMAccelId id;
};
typedef struct VMCLQueueId VMCLQueueId;

struct VMCLQueueAllocateDesc {
   VMCLQueueId client;
   u_int subDevice;
   VMAccelQueueDesc desc;
};
typedef struct VMCLQueueAllocateDesc VMCLQueueAllocateDesc;

struct VMCLQueueFlushOp {
   VMCLQueueId queue;
};
typedef struct VMCLQueueFlushOp VMCLQueueFlushOp;

struct VMCLSurfaceCopyOp {
   VMCLQueueId queue;
   VMCLSurfaceId dst;
   VMCLSurfaceId src;
   VMAccelSurfaceCopyOp op;
};
typedef struct VMCLSurfaceCopyOp VMCLSurfaceCopyOp;

struct VMCLImageFillOp {
   VMCLQueueId queue;
   VMCLSurfaceId img;
   VMAccelImageFillOp op;
};
typedef struct VMCLImageFillOp VMCLImageFillOp;

struct VMCLImageUploadOp {
   VMCLQueueId queue;
   VMCLSurfaceId img;
   VMAccelImageTransferOp op;
   VMAccelSurfaceWriteConsistency mode;
};
typedef struct VMCLImageUploadOp VMCLImageUploadOp;

struct VMCLImageDownloadOp {
   VMCLQueueId queue;
   VMCLSurfaceId img;
   VMAccelImageTransferOp op;
   VMAccelSurfaceReadConsistency mode;
};
typedef struct VMCLImageDownloadOp VMCLImageDownloadOp;

struct VMCLSurfaceMapOp {
   VMCLQueueId queue;
   VMAccelSurfaceMapOp op;
};
typedef struct VMCLSurfaceMapOp VMCLSurfaceMapOp;

struct VMCLSurfaceUnmapOp {
   VMCLQueueId queue;
   VMAccelSurfaceUnmapOp op;
};
typedef struct VMCLSurfaceUnmapOp VMCLSurfaceUnmapOp;

struct VMCLSamplerId {
   VMCLContextId cid;
   VMAccelId id;
};
typedef struct VMCLSamplerId VMCLSamplerId;

enum VMCLSamplerAddressingMode {
   VMCL_ADDRESS_MIRRORED_REPEAT = 0,
   VMCL_ADDRESS_REPEAT = 1,
   VMCL_ADDRESS_CLAMP_TO_EDGE = 2,
   VMCL_ADDRESS_CLAMP = 3,
   VMCL_ADDRESS_NONE = 4,
};
typedef enum VMCLSamplerAddressingMode VMCLSamplerAddressingMode;

enum VMCLSamplerFilterMode {
   VMCL_FILTER_NEAREST = 0,
   VMCL_FILTER_LINEAR = 1,
};
typedef enum VMCLSamplerFilterMode VMCLSamplerFilterMode;

struct VMCLSamplerDesc {
   bool_t normalizedCoords;
   VMCLSamplerAddressingMode addressMode;
   VMCLSamplerFilterMode filterMode;
};
typedef struct VMCLSamplerDesc VMCLSamplerDesc;

struct VMCLSamplerAllocateDesc {
   VMCLSamplerId client;
   VMCLSamplerDesc desc;
};
typedef struct VMCLSamplerAllocateDesc VMCLSamplerAllocateDesc;

struct VMCLSamplerAllocateStatus {
   VMAccelStatusCode status;
};
typedef struct VMCLSamplerAllocateStatus VMCLSamplerAllocateStatus;

struct VMCLKernelId {
   VMCLContextId cid;
   VMAccelId id;
};
typedef struct VMCLKernelId VMCLKernelId;

struct VMCLKernelAllocateDesc {
   VMCLKernelId client;
   u_int subDevice;
   VMCLKernelLanguage language;
   struct {
      u_int source_len;
      char *source_val;
   } source;
   struct {
      u_int kernelName_len;
      char *kernelName_val;
   } kernelName;
};
typedef struct VMCLKernelAllocateDesc VMCLKernelAllocateDesc;

struct VMCLKernelAllocateStatus {
   VMAccelStatusCode status;
};
typedef struct VMCLKernelAllocateStatus VMCLKernelAllocateStatus;

enum VMCLKernelSemanticType {
   VMCL_SEMANTIC_DECLARED = 0,
   VMCL_SEMANTIC_WORK_DIMENSION = 1,
   VMCL_SEMANTIC_GLOBAL_ID = 2,
   VMCL_SEMANTIC_GLOBAL_SIZE = 3,
   VMCL_SEMANTIC_GLOBAL_OFFSET = 4,
   VMCL_SEMANTIC_GROUP_ID = 5,
   VMCL_SEMANTIC_LOCAL_ID = 6,
   VMCL_SEMANTIC_LOCAL_SIZE = 7,
   VMCL_SEMANTIC_NUM_GROUPS = 8,
   VMCL_SEMANTIC_MAX = 9,
};
typedef enum VMCLKernelSemanticType VMCLKernelSemanticType;

enum VMCLKernelArgType {
   VMCL_ARG_IMMEDIATE = 0,
   VMCL_ARG_SURFACE = 1,
   VMCL_ARG_SAMPLER = 2,
};
typedef enum VMCLKernelArgType VMCLKernelArgType;

struct VMCLKernelArgDesc {
   VMCLQueueId queue;
   u_int index;
   VMCLKernelArgType type;
   VMAccelSurfaceUsage usage;
   VMAccelSurfaceId surf;
   VMCLSamplerId sampler;
};
typedef struct VMCLKernelArgDesc VMCLKernelArgDesc;

struct VMCLDispatchOp {
   VMCLQueueId queue;
   VMCLKernelId kernel;
   u_int dimension;
   struct {
      u_int globalWorkOffset_len;
      u_int *globalWorkOffset_val;
   } globalWorkOffset;
   struct {
      u_int globalWorkSize_len;
      u_int *globalWorkSize_val;
   } globalWorkSize;
   struct {
      u_int localWorkSize_len;
      u_int *localWorkSize_val;
   } localWorkSize;
   struct {
      u_int args_len;
      VMCLKernelArgDesc *args_val;
   } args;
   struct {
      u_int refs_len;
      VMAccelSurfaceId *refs_val;
   } refs;
};
typedef struct VMCLDispatchOp VMCLDispatchOp;

struct VMCLContextAllocateReturnStatus {
   int errno;
   union {
      VMCLContextAllocateStatus *ret;
   } VMCLContextAllocateReturnStatus_u;
};
typedef struct VMCLContextAllocateReturnStatus VMCLContextAllocateReturnStatus;

struct VMCLSamplerAllocateReturnStatus {
   int errno;
   union {
      VMCLSamplerAllocateStatus *ret;
   } VMCLSamplerAllocateReturnStatus_u;
};
typedef struct VMCLSamplerAllocateReturnStatus VMCLSamplerAllocateReturnStatus;

struct VMCLKernelAllocateReturnStatus {
   int errno;
   union {
      VMCLKernelAllocateStatus *ret;
   } VMCLKernelAllocateReturnStatus_u;
};
typedef struct VMCLKernelAllocateReturnStatus VMCLKernelAllocateReturnStatus;

#define VMCL 0x20000081
#define VMCL_VERSION 2

#if defined(__STDC__) || defined(__cplusplus)
#define VMCL_CONTEXTALLOC 1
extern VMCLContextAllocateReturnStatus *
vmcl_contextalloc_2(VMCLContextAllocateDesc *, CLIENT *);
extern VMCLContextAllocateReturnStatus *
vmcl_contextalloc_2_svc(VMCLContextAllocateDesc *, struct svc_req *);
#define VMCL_CONTEXTDESTROY 2
extern VMAccelReturnStatus *vmcl_contextdestroy_2(VMCLContextId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_contextdestroy_2_svc(VMCLContextId *,
                                                      struct svc_req *);
#define VMCL_SURFACEALLOC 3
extern VMAccelSurfaceAllocateReturnStatus *
vmcl_surfacealloc_2(VMCLSurfaceAllocateDesc *, CLIENT *);
extern VMAccelSurfaceAllocateReturnStatus *
vmcl_surfacealloc_2_svc(VMCLSurfaceAllocateDesc *, struct svc_req *);
#define VMCL_SURFACEDESTROY 4
extern VMAccelReturnStatus *vmcl_surfacedestroy_2(VMCLSurfaceId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_surfacedestroy_2_svc(VMCLSurfaceId *,
                                                      struct svc_req *);
#define VMCL_QUEUEALLOC 5
extern VMAccelQueueReturnStatus *vmcl_queuealloc_2(VMCLQueueAllocateDesc *,
                                                   CLIENT *);
extern VMAccelQueueReturnStatus *vmcl_queuealloc_2_svc(VMCLQueueAllocateDesc *,
                                                       struct svc_req *);
#define VMCL_QUEUEDESTROY 6
extern VMAccelReturnStatus *vmcl_queuedestroy_2(VMCLQueueId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_queuedestroy_2_svc(VMCLQueueId *,
                                                    struct svc_req *);
#define VMCL_QUEUEFLUSH 7
extern VMAccelReturnStatus *vmcl_queueflush_2(VMCLQueueId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_queueflush_2_svc(VMCLQueueId *,
                                                  struct svc_req *);
#define VMCL_IMAGEUPLOAD 8
extern VMAccelReturnStatus *vmcl_imageupload_2(VMCLImageUploadOp *, CLIENT *);
extern VMAccelReturnStatus *vmcl_imageupload_2_svc(VMCLImageUploadOp *,
                                                   struct svc_req *);
#define VMCL_IMAGEDOWNLOAD 9
extern VMAccelDownloadReturnStatus *vmcl_imagedownload_2(VMCLImageDownloadOp *,
                                                         CLIENT *);
extern VMAccelDownloadReturnStatus *
vmcl_imagedownload_2_svc(VMCLImageDownloadOp *, struct svc_req *);
#define VMCL_SURFACEMAP 10
extern VMAccelSurfaceMapReturnStatus *vmcl_surfacemap_2(VMCLSurfaceMapOp *,
                                                        CLIENT *);
extern VMAccelSurfaceMapReturnStatus *vmcl_surfacemap_2_svc(VMCLSurfaceMapOp *,
                                                            struct svc_req *);
#define VMCL_SURFACEUNMAP 11
extern VMAccelReturnStatus *vmcl_surfaceunmap_2(VMCLSurfaceUnmapOp *, CLIENT *);
extern VMAccelReturnStatus *vmcl_surfaceunmap_2_svc(VMCLSurfaceUnmapOp *,
                                                    struct svc_req *);
#define VMCL_SURFACECOPY 12
extern VMAccelReturnStatus *vmcl_surfacecopy_2(VMCLSurfaceCopyOp *, CLIENT *);
extern VMAccelReturnStatus *vmcl_surfacecopy_2_svc(VMCLSurfaceCopyOp *,
                                                   struct svc_req *);
#define VMCL_IMAGEFILL 13
extern VMAccelReturnStatus *vmcl_imagefill_2(VMCLImageFillOp *, CLIENT *);
extern VMAccelReturnStatus *vmcl_imagefill_2_svc(VMCLImageFillOp *,
                                                 struct svc_req *);
#define VMCL_SAMPLERALLOC 14
extern VMCLSamplerAllocateReturnStatus *
vmcl_sampleralloc_2(VMCLSamplerAllocateDesc *, CLIENT *);
extern VMCLSamplerAllocateReturnStatus *
vmcl_sampleralloc_2_svc(VMCLSamplerAllocateDesc *, struct svc_req *);
#define VMCL_SAMPLERDESTROY 15
extern VMAccelReturnStatus *vmcl_samplerdestroy_2(VMCLSamplerId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_samplerdestroy_2_svc(VMCLSamplerId *,
                                                      struct svc_req *);
#define VMCL_KERNELALLOC 16
extern VMCLKernelAllocateReturnStatus *
vmcl_kernelalloc_2(VMCLKernelAllocateDesc *, CLIENT *);
extern VMCLKernelAllocateReturnStatus *
vmcl_kernelalloc_2_svc(VMCLKernelAllocateDesc *, struct svc_req *);
#define VMCL_KERNELDESTROY 17
extern VMAccelReturnStatus *vmcl_kerneldestroy_2(VMCLKernelId *, CLIENT *);
extern VMAccelReturnStatus *vmcl_kerneldestroy_2_svc(VMCLKernelId *,
                                                     struct svc_req *);
#define VMCL_DISPATCH 18
extern VMAccelReturnStatus *vmcl_dispatch_2(VMCLDispatchOp *, CLIENT *);
extern VMAccelReturnStatus *vmcl_dispatch_2_svc(VMCLDispatchOp *,
                                                struct svc_req *);
extern int vmcl_2_freeresult(SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define VMCL_CONTEXTALLOC 1
extern VMCLContextAllocateReturnStatus *vmcl_contextalloc_2();
extern VMCLContextAllocateReturnStatus *vmcl_contextalloc_2_svc();
#define VMCL_CONTEXTDESTROY 2
extern VMAccelReturnStatus *vmcl_contextdestroy_2();
extern VMAccelReturnStatus *vmcl_contextdestroy_2_svc();
#define VMCL_SURFACEALLOC 3
extern VMAccelSurfaceAllocateReturnStatus *vmcl_surfacealloc_2();
extern VMAccelSurfaceAllocateReturnStatus *vmcl_surfacealloc_2_svc();
#define VMCL_SURFACEDESTROY 4
extern VMAccelReturnStatus *vmcl_surfacedestroy_2();
extern VMAccelReturnStatus *vmcl_surfacedestroy_2_svc();
#define VMCL_QUEUEALLOC 5
extern VMAccelQueueReturnStatus *vmcl_queuealloc_2();
extern VMAccelQueueReturnStatus *vmcl_queuealloc_2_svc();
#define VMCL_QUEUEDESTROY 6
extern VMAccelReturnStatus *vmcl_queuedestroy_2();
extern VMAccelReturnStatus *vmcl_queuedestroy_2_svc();
#define VMCL_QUEUEFLUSH 7
extern VMAccelReturnStatus *vmcl_queueflush_2();
extern VMAccelReturnStatus *vmcl_queueflush_2_svc();
#define VMCL_IMAGEUPLOAD 8
extern VMAccelReturnStatus *vmcl_imageupload_2();
extern VMAccelReturnStatus *vmcl_imageupload_2_svc();
#define VMCL_IMAGEDOWNLOAD 9
extern VMAccelDownloadReturnStatus *vmcl_imagedownload_2();
extern VMAccelDownloadReturnStatus *vmcl_imagedownload_2_svc();
#define VMCL_SURFACEMAP 10
extern VMAccelSurfaceMapReturnStatus *vmcl_surfacemap_2();
extern VMAccelSurfaceMapReturnStatus *vmcl_surfacemap_2_svc();
#define VMCL_SURFACEUNMAP 11
extern VMAccelReturnStatus *vmcl_surfaceunmap_2();
extern VMAccelReturnStatus *vmcl_surfaceunmap_2_svc();
#define VMCL_SURFACECOPY 12
extern VMAccelReturnStatus *vmcl_surfacecopy_2();
extern VMAccelReturnStatus *vmcl_surfacecopy_2_svc();
#define VMCL_IMAGEFILL 13
extern VMAccelReturnStatus *vmcl_imagefill_2();
extern VMAccelReturnStatus *vmcl_imagefill_2_svc();
#define VMCL_SAMPLERALLOC 14
extern VMCLSamplerAllocateReturnStatus *vmcl_sampleralloc_2();
extern VMCLSamplerAllocateReturnStatus *vmcl_sampleralloc_2_svc();
#define VMCL_SAMPLERDESTROY 15
extern VMAccelReturnStatus *vmcl_samplerdestroy_2();
extern VMAccelReturnStatus *vmcl_samplerdestroy_2_svc();
#define VMCL_KERNELALLOC 16
extern VMCLKernelAllocateReturnStatus *vmcl_kernelalloc_2();
extern VMCLKernelAllocateReturnStatus *vmcl_kernelalloc_2_svc();
#define VMCL_KERNELDESTROY 17
extern VMAccelReturnStatus *vmcl_kerneldestroy_2();
extern VMAccelReturnStatus *vmcl_kerneldestroy_2_svc();
#define VMCL_DISPATCH 18
extern VMAccelReturnStatus *vmcl_dispatch_2();
extern VMAccelReturnStatus *vmcl_dispatch_2_svc();
extern int vmcl_2_freeresult();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern bool_t xdr_VMCLCaps(XDR *, VMCLCaps *);
extern bool_t xdr_VMCLKernelLanguage(XDR *, VMCLKernelLanguage *);
extern bool_t xdr_VMCLContextId(XDR *, VMCLContextId *);
extern bool_t xdr_VMCLContextAllocateDesc(XDR *, VMCLContextAllocateDesc *);
extern bool_t xdr_VMCLContextAllocateStatus(XDR *, VMCLContextAllocateStatus *);
extern bool_t xdr_VMCLSurfaceId(XDR *, VMCLSurfaceId *);
extern bool_t xdr_VMCLSurfaceAllocateDesc(XDR *, VMCLSurfaceAllocateDesc *);
extern bool_t xdr_VMCLQueueId(XDR *, VMCLQueueId *);
extern bool_t xdr_VMCLQueueAllocateDesc(XDR *, VMCLQueueAllocateDesc *);
extern bool_t xdr_VMCLQueueFlushOp(XDR *, VMCLQueueFlushOp *);
extern bool_t xdr_VMCLSurfaceCopyOp(XDR *, VMCLSurfaceCopyOp *);
extern bool_t xdr_VMCLImageFillOp(XDR *, VMCLImageFillOp *);
extern bool_t xdr_VMCLImageUploadOp(XDR *, VMCLImageUploadOp *);
extern bool_t xdr_VMCLImageDownloadOp(XDR *, VMCLImageDownloadOp *);
extern bool_t xdr_VMCLSurfaceMapOp(XDR *, VMCLSurfaceMapOp *);
extern bool_t xdr_VMCLSurfaceUnmapOp(XDR *, VMCLSurfaceUnmapOp *);
extern bool_t xdr_VMCLSamplerId(XDR *, VMCLSamplerId *);
extern bool_t xdr_VMCLSamplerAddressingMode(XDR *, VMCLSamplerAddressingMode *);
extern bool_t xdr_VMCLSamplerFilterMode(XDR *, VMCLSamplerFilterMode *);
extern bool_t xdr_VMCLSamplerDesc(XDR *, VMCLSamplerDesc *);
extern bool_t xdr_VMCLSamplerAllocateDesc(XDR *, VMCLSamplerAllocateDesc *);
extern bool_t xdr_VMCLSamplerAllocateStatus(XDR *, VMCLSamplerAllocateStatus *);
extern bool_t xdr_VMCLKernelId(XDR *, VMCLKernelId *);
extern bool_t xdr_VMCLKernelAllocateDesc(XDR *, VMCLKernelAllocateDesc *);
extern bool_t xdr_VMCLKernelAllocateStatus(XDR *, VMCLKernelAllocateStatus *);
extern bool_t xdr_VMCLKernelSemanticType(XDR *, VMCLKernelSemanticType *);
extern bool_t xdr_VMCLKernelArgType(XDR *, VMCLKernelArgType *);
extern bool_t xdr_VMCLKernelArgDesc(XDR *, VMCLKernelArgDesc *);
extern bool_t xdr_VMCLDispatchOp(XDR *, VMCLDispatchOp *);
extern bool_t
xdr_VMCLContextAllocateReturnStatus(XDR *, VMCLContextAllocateReturnStatus *);
extern bool_t
xdr_VMCLSamplerAllocateReturnStatus(XDR *, VMCLSamplerAllocateReturnStatus *);
extern bool_t
xdr_VMCLKernelAllocateReturnStatus(XDR *, VMCLKernelAllocateReturnStatus *);

#else /* K&R C */
extern bool_t xdr_VMCLCaps();
extern bool_t xdr_VMCLKernelLanguage();
extern bool_t xdr_VMCLContextId();
extern bool_t xdr_VMCLContextAllocateDesc();
extern bool_t xdr_VMCLContextAllocateStatus();
extern bool_t xdr_VMCLSurfaceId();
extern bool_t xdr_VMCLSurfaceAllocateDesc();
extern bool_t xdr_VMCLQueueId();
extern bool_t xdr_VMCLQueueAllocateDesc();
extern bool_t xdr_VMCLQueueFlushOp();
extern bool_t xdr_VMCLSurfaceCopyOp();
extern bool_t xdr_VMCLImageFillOp();
extern bool_t xdr_VMCLImageUploadOp();
extern bool_t xdr_VMCLImageDownloadOp();
extern bool_t xdr_VMCLSurfaceMapOp();
extern bool_t xdr_VMCLSurfaceUnmapOp();
extern bool_t xdr_VMCLSamplerId();
extern bool_t xdr_VMCLSamplerAddressingMode();
extern bool_t xdr_VMCLSamplerFilterMode();
extern bool_t xdr_VMCLSamplerDesc();
extern bool_t xdr_VMCLSamplerAllocateDesc();
extern bool_t xdr_VMCLSamplerAllocateStatus();
extern bool_t xdr_VMCLKernelId();
extern bool_t xdr_VMCLKernelAllocateDesc();
extern bool_t xdr_VMCLKernelAllocateStatus();
extern bool_t xdr_VMCLKernelSemanticType();
extern bool_t xdr_VMCLKernelArgType();
extern bool_t xdr_VMCLKernelArgDesc();
extern bool_t xdr_VMCLDispatchOp();
extern bool_t xdr_VMCLContextAllocateReturnStatus();
extern bool_t xdr_VMCLSamplerAllocateReturnStatus();
extern bool_t xdr_VMCLKernelAllocateReturnStatus();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_VMCL_RPC_H_RPCGEN */
